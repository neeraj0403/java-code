package Assignment_hackerblocks;

import java.util.ArrayList;
import java.util.Scanner;
import java.util.Stack;

public class neighbours {

	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		int t = scn.nextInt();
		while (t > 0) {
			int n = scn.nextInt();
			int arr[] = new int[n];
			for (int i = 0; i < n; i++) {
				arr[i] = scn.nextInt();
			}
			ArrayList<Integer> odd = new ArrayList<>();
			ArrayList<Integer> even = new ArrayList<>();
			Stack<Integer> odds = new Stack<>();
			Stack<Integer> evens = new Stack<>();

			for (int i = 0; i < arr.length; i++) {
				if (i % 2 == 0) {
					even.add(arr[i]);
				} else {
					odd.add(arr[i]);
				}

			}

			int fs = 0;
			int ss = 0;
			int es1 = 0;
			int es2 = 0;
			for (int i = 0; i < odd.size(); i++) {
				// es1 = odd.get(i);

				fs += odd.get(i);
				if (es1 < fs) {
					odds.push(odd.get(i));

					es1 = fs;
				}

			}
			for (int i = 0; i < even.size(); i++) {
				// es2 = even.get(i);

				ss += even.get(i);
				if (ss < 0) {
					ss = 0;
				}
				if (es2 < ss) {
					evens.push(even.get(i));
					es2 = ss;

				}
			}
			if (es1 > es2) {
				while (!odd.isEmpty()) {
					System.out.print(odds.pop());
				}
			} else if (es2 > es1) {
				while (!even.isEmpty()) {
					System.out.print(evens.pop());
				}

			} else {
				if (odds.pop() > evens.pop()) {
					while (!odd.isEmpty()) {
						System.out.print(odds.pop());
					}

				} else if (evens.pop() > odds.pop()) {
					while (!even.isEmpty()) {
						System.out.print(evens.pop());
					}

				}
			}
			t--;
		}
	}

}
